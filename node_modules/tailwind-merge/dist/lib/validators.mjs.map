{"version":3,"file":"validators.mjs","sources":["../../src/lib/validators.ts"],"sourcesContent":["const arbitraryValueRegex = /^\\[(.+)\\]$/\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(classPart: string) {\n    return (\n        !Number.isNaN(Number(classPart)) ||\n        stringLengths.has(classPart) ||\n        fractionRegex.test(classPart) ||\n        isArbitraryLength(classPart)\n    )\n}\n\nexport function isArbitraryLength(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n\nexport function isArbitrarySize(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('size:') : false\n}\n\nexport function isArbitraryPosition(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue ? arbitraryValue.startsWith('position:') : false\n}\n\nexport function isArbitraryUrl(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:')\n        : false\n}\n\nexport function isArbitraryNumber(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    return arbitraryValue\n        ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:')\n        : false\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isInteger(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return Number.isInteger(Number(arbitraryValue))\n    }\n\n    return Number.isInteger(Number(classPart))\n}\n\nexport function isArbitraryValue(classPart: string) {\n    return arbitraryValueRegex.test(classPart)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(classPart: string) {\n    return tshirtUnitRegex.test(classPart)\n}\n\nexport function isArbitraryShadow(classPart: string) {\n    const arbitraryValue = arbitraryValueRegex.exec(classPart)?.[1]\n\n    if (arbitraryValue) {\n        return shadowRegex.test(arbitraryValue)\n    }\n\n    return false\n}\n"],"names":["arbitraryValueRegex","fractionRegex","stringLengths","Set","tshirtUnitRegex","lengthUnitRegex","shadowRegex","isLength","classPart","Number","isNaN","has","test","isArbitraryLength","arbitraryValue","exec","startsWith","isArbitrarySize","isArbitraryPosition","isArbitraryUrl","isArbitraryNumber","isArbitraryWeight","isInteger","isArbitraryValue","isAny","isTshirtSize","isArbitraryShadow"],"mappings":"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"}